/// <reference types="maid" />
/// <reference types="@rbxts/types" />
import Maid from "@rbxts/maid";
import { OnInit, OnStart, OnTick, OnPhysics, OnRender } from "./flamework";
import { Constructor } from "./types";
export declare class BaseComponent<A = {}> {
    /**
     * A maid that will be destroyed when the component is.
     */
    maid: Maid;
    /**
     * Attributes attached to this instance.
     */
    attributes: A;
    /**
     * The instance this component is attached to.
     * This should only be called in a component lifecycle event.
     */
    instance: Instance;
    setInstance(instance: Instance): void;
    /**
     * Destroys this component instance.
     */
    destroy(): void;
}
/**
 * This class is responsible for loading and managing
 * all components in the game.
 */
export declare class Components implements OnInit, OnStart, OnTick, OnPhysics, OnRender {
    private components;
    private activeComponents;
    private tick;
    private physics;
    private render;
    onInit(): void;
    onStart(): void;
    onTick(dt: number): void;
    onRender(dt: number): void;
    onPhysics(dt: number, time: number): void;
    private getAttributes;
    private validateAttributes;
    private safeCall;
    private setupComponent;
    private getComponentFromSpecifier;
    getComponent<T>(instance: Instance): T;
    getComponent<T>(instance: Instance, componentSpecifier: Constructor<T>): T;
    addComponent<T>(instance: Instance): T;
    addComponent<T>(instance: Instance, componentSpecifier: Constructor<T>): T;
    removeComponent<T>(instance: Instance): void;
    removeComponent(instance: Instance, componentSpecifier: Constructor<BaseComponent>): void;
}
