-- Compiled with roblox-ts v1.1.1
local TS = _G[script]
local Maid = TS.import(script, TS.getModule(script, "maid").Maid)
local CollectionService = TS.import(script, TS.getModule(script, "services")).CollectionService
local _flamework_0 = TS.import(script, script.Parent, "flamework")
local Service = _flamework_0.Service
local Controller = _flamework_0.Controller
local Flamework = _flamework_0.Flamework
local BaseComponent
do
	BaseComponent = setmetatable({}, {
		__tostring = function()
			return "BaseComponent"
		end,
	})
	BaseComponent.__index = BaseComponent
	function BaseComponent.new(...)
		local self = setmetatable({}, BaseComponent)
		self:constructor(...)
		return self
	end
	function BaseComponent:constructor()
		self.maid = Maid.new()
	end
	function BaseComponent:setInstance(instance)
		self.instance = instance
		self.attributes = instance:GetAttributes()
	end
	function BaseComponent:destroy()
		self.maid:Destroy()
	end
end
--[[
	*
	* This class is responsible for loading and managing
	* all components in the game.
]]
local Components
do
	Components = setmetatable({}, {
		__tostring = function()
			return "Components"
		end,
	})
	Components.__index = Components
	function Components.new(...)
		local self = setmetatable({}, Components)
		self:constructor(...)
		return self
	end
	function Components:constructor()
		self.components = {}
		self.activeComponents = {}
		self.tick = {}
		self.physics = {}
		self.render = {}
	end
	function Components:onInit()
		local components = {}
		for ctor, metadata in pairs(Flamework.metadata) do
			local _1 = metadata.decorators
			local _2 = function(x)
				return x.config
			end
			-- ▼ ReadonlyArray.map ▼
			local _3 = table.create(#_1)
			for _k_4, _v_5 in ipairs(_1) do
				_3[_k_4] = _2(_v_5, _k_4 - 1, _1)
			end
			-- ▲ ReadonlyArray.map ▲
			local _4 = function(x)
				return x.type == "Component"
			end
			-- ▼ ReadonlyArray.find ▼
			local _5 = nil
			for _i_6, _v_7 in ipairs(_3) do
				if _4(_v_7, _i_6 - 1, _3) == true then
					_5 = _v_7
					break
				end
			end
			-- ▲ ReadonlyArray.find ▲
			local component = _5
			if component then
				local _6 = components
				local _7 = ctor
				local _8 = {
					metadata = metadata,
					ctor = ctor,
					config = component,
				}
				-- ▼ Map.set ▼
				_6[_7] = _8
				-- ▲ Map.set ▲
			end
		end
		self.components = components
	end
	function Components:onStart()
		for _, _binding_1 in pairs(self.components) do
			local config = _binding_1.config
			local ctor = _binding_1.ctor
			local metadata = _binding_1.metadata
			if config.tag ~= nil then
				CollectionService:GetInstanceAddedSignal(config.tag):Connect(function(instance)
					self:addComponent(instance, "$:Q9")
				end)
				CollectionService:GetInstanceRemovedSignal(config.tag):Connect(function(instance)
					self:removeComponent(instance, "$:Q9")
				end)
				for _, instance in ipairs(CollectionService:GetTagged(config.tag)) do
					self:safeCall("Failed to instantiate " .. tostring(instance), function()
						return self:addComponent(instance, "$:Q9")
					end)
				end
			end
		end
	end
	function Components:onTick(dt)
		for component in pairs(self.tick) do
			local name = component.instance:GetFullName()
			self:safeCall("Component failed to tick " .. name, function()
				return component:onTick(dt)
			end)
		end
	end
	function Components:onRender(dt)
		for component in pairs(self.render) do
			local name = component.instance:GetFullName()
			self:safeCall("Component failed to tick " .. name, function()
				return component:onRender(dt)
			end)
		end
	end
	function Components:onPhysics(dt, time)
		for component in pairs(self.physics) do
			local name = component.instance:GetFullName()
			self:safeCall("Component failed to tick " .. name, function()
				return component:onPhysics(dt, time)
			end)
		end
	end
	function Components:getAttributes(ctor)
		local attributes = {}
		local _1 = self.components
		local _2 = ctor
		local metadata = _1[_2]
		if metadata then
			if metadata.config.attributes ~= nil then
				for attribute, guard in pairs(metadata.config.attributes) do
					local _3 = attributes
					local _4 = attribute
					local _5 = guard
					-- ▼ Map.set ▼
					_3[_4] = _5
					-- ▲ Map.set ▲
				end
			end
			local parentCtor = getmetatable(ctor)
			if parentCtor.__index ~= nil then
				for attribute, guard in pairs(self:getAttributes(parentCtor.__index)) do
					local _3 = attributes
					local _4 = attribute
					if not (_3[_4] ~= nil) then
						local _5 = attributes
						local _6 = attribute
						local _7 = guard
						-- ▼ Map.set ▼
						_5[_6] = _7
						-- ▲ Map.set ▲
					end
				end
			end
		end
		return attributes
	end
	function Components:validateAttributes(instance, guards)
		local attributes = instance:GetAttributes()
		for key, guard in pairs(guards) do
			local attribute = attributes[key]
			if not guard(attribute) then
				return false
			end
		end
		return true
	end
	function Components:safeCall(message, func)
		coroutine.wrap(function()
			local _1 = func
			local _success_2, _valueOrError_3 = pcall(_1)
			local result = _success_2 and {
				success = true,
				value = _valueOrError_3,
			} or {
				success = false,
				error = _valueOrError_3,
			}
			if not result.success then
				warn(message)
			end
		end)()
	end
	function Components:setupComponent(instance, component, _param_1)
		local config = _param_1.config
		local ctor = _param_1.ctor
		component:setInstance(instance)
		if Flamework._implements(component, "$:Op") then
			local name = instance:GetFullName()
			self:safeCall("Component failed to start " .. name, function()
				return component:onStart()
			end)
		end
		if Flamework._implements(component, "$:kJ") then
			local _2 = self.render
			local _3 = component
			-- ▼ Set.add ▼
			_2[_3] = true
			-- ▲ Set.add ▲
			component.maid:GiveTask(function()
				local _4 = self.render
				local _5 = component
				-- ▼ Set.delete ▼
				local _6 = _4[_5] ~= nil
				_4[_5] = nil
				-- ▲ Set.delete ▲
				return _6
			end)
		end
		if Flamework._implements(component, "$:r5") then
			local _2 = self.physics
			local _3 = component
			-- ▼ Set.add ▼
			_2[_3] = true
			-- ▲ Set.add ▲
			component.maid:GiveTask(function()
				local _4 = self.physics
				local _5 = component
				-- ▼ Set.delete ▼
				local _6 = _4[_5] ~= nil
				_4[_5] = nil
				-- ▲ Set.delete ▲
				return _6
			end)
		end
		if Flamework._implements(component, "$:eA") then
			local _2 = self.tick
			local _3 = component
			-- ▼ Set.add ▼
			_2[_3] = true
			-- ▲ Set.add ▲
			component.maid:GiveTask(function()
				local _4 = self.tick
				local _5 = component
				-- ▼ Set.delete ▼
				local _6 = _4[_5] ~= nil
				_4[_5] = nil
				-- ▲ Set.delete ▲
				return _6
			end)
		end
		if config.refreshAttributes == nil or config.refreshAttributes then
			local attributes = self:getAttributes(ctor)
			for attribute, guard in pairs(attributes) do
				local _2 = attribute
				if type(_2) == "string" then
					component.maid:GiveTask(instance:GetAttributeChangedSignal(attribute):Connect(function()
						local value = instance:GetAttribute(attribute)
						if guard(value) then
							local _3 = (component.attributes)
							local _4 = attribute
							local _5 = value
							-- ▼ Map.set ▼
							_3[_4] = _5
							-- ▲ Map.set ▲
						end
					end))
				end
			end
		end
	end
	function Components:getComponentFromSpecifier(componentSpecifier)
		local _2 = componentSpecifier
		local _result_3
		if type(_2) == "string" then
			local _4 = Flamework.idToTarget
			local _5 = componentSpecifier
			_result_3 = (_4[_5])
		else
			_result_3 = componentSpecifier
		end
		return _result_3
	end
	function Components:getComponent(instance, componentSpecifier)
		local component = self:getComponentFromSpecifier(componentSpecifier)
		local _2 = component
		assert(_2 ~= 0 and _2 == _2 and _2 ~= "" and _2, "Could not find component from specifier")
		local _3 = self.activeComponents
		local _4 = instance
		local activeComponents = _3[_4]
		if not activeComponents then
			return nil
		end
		local _5 = activeComponents
		local _6 = component
		return _5[_6]
	end
	function Components:addComponent(instance, componentSpecifier)
		local component = self:getComponentFromSpecifier(componentSpecifier)
		local _2 = component
		assert(_2 ~= 0 and _2 == _2 and _2 ~= "" and _2, "Could not find component from specifier")
		local _3 = self.components
		local _4 = component
		local componentInfo = _3[_4]
		local _5 = componentInfo
		assert(_5, "Provided componentSpecifier does not exist")
		local attributeGuards = self:getAttributes(component)
		if attributeGuards ~= nil then
			local _6 = self:validateAttributes(instance, attributeGuards)
			local _7 = instance:GetFullName() .. " has invalid attributes for " .. componentInfo.metadata.identifier
			assert(_6, _7)
		end
		local _6 = self.activeComponents
		local _7 = instance
		local activeComponents = _6[_7]
		if not activeComponents then
			local _8 = self.activeComponents
			activeComponents = {}
			local _9 = instance
			local _10 = activeComponents
			-- ▼ Map.set ▼
			_8[_9] = _10
			-- ▲ Map.set ▲
		end
		local _8 = activeComponents
		local _9 = component
		local existingComponent = _8[_9]
		if existingComponent ~= nil then
			return existingComponent
		end
		local componentInstance = Flamework.createDependency(component)
		local _10 = activeComponents
		local _11 = component
		local _12 = componentInstance
		-- ▼ Map.set ▼
		_10[_11] = _12
		-- ▲ Map.set ▲
		self:setupComponent(instance, componentInstance, componentInfo)
		return componentInstance
	end
	function Components:removeComponent(instance, componentSpecifier)
		local component = self:getComponentFromSpecifier(componentSpecifier)
		local _2 = component
		assert(_2 ~= 0 and _2 == _2 and _2 ~= "" and _2, "Could not find component from specifier")
		local _3 = self.activeComponents
		local _4 = instance
		local activeComponents = _3[_4]
		if not activeComponents then
			return nil
		end
		local _5 = activeComponents
		local _6 = component
		local existingComponent = _5[_6]
		if not existingComponent then
			return nil
		end
		existingComponent:destroy()
		local _7 = activeComponents
		local _8 = component
		-- ▼ Map.delete ▼
		_7[_8] = nil
		-- ▲ Map.delete ▲
		-- ▼ ReadonlyMap.size ▼
		local _9 = 0
		for _ in pairs(activeComponents) do
			_9 += 1
		end
		-- ▲ ReadonlyMap.size ▲
		if _9 == 0 then
			local _10 = self.activeComponents
			local _11 = instance
			-- ▼ Map.delete ▼
			_10[_11] = nil
			-- ▲ Map.delete ▲
		end
	end
end
Flamework.registerMetadata(Components, {
	identifier = "$:LD",
	isExternal = false,
	decorators = {},
	implements = { "$:Gp", "$:Op", "$:eA", "$:r5", "$:kJ" },
})
return {
	BaseComponent = BaseComponent,
	Components = Components,
}
