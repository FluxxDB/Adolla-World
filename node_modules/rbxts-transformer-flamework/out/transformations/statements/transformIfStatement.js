"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformIfStatement = void 0;
var typescript_1 = __importDefault(require("typescript"));
var wrapToBlock_1 = require("../../functions/wrapToBlock");
var transformExpression_1 = require("../transformExpression");
var transformStatement_1 = require("../transformStatement");
function transformIfStatement(state, node) {
    var _a = __read(state.capture(function () { return transformExpression_1.transformExpression(state, node.expression); }), 2), expression = _a[0], prereqs = _a[1];
    return __spreadArray(__spreadArray([], __read(prereqs)), [
        typescript_1.default.factory.updateIfStatement(node, expression, wrapToBlock_1.wrapToBlock(transformStatement_1.transformStatement(state, node.thenStatement)), node.elseStatement ? wrapToBlock_1.wrapToBlock(transformStatement_1.transformStatement(state, node.elseStatement)) : undefined),
    ]);
}
exports.transformIfStatement = transformIfStatement;
