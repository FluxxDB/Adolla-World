"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Warning = exports.Errors = exports.warning = exports.error = exports.createFormattedDiagnostic = exports.createDiagnosticAtLocation = void 0;
var typescript_1 = __importDefault(require("typescript"));
function createDiagnosticAtLocation(node, messageText, category, file) {
    if (file === void 0) { file = typescript_1.default.getSourceFileOfNode(node); }
    return {
        category: category,
        file: file,
        messageText: messageText,
        start: node.getStart(),
        length: node.getWidth(),
        code: " @rbxts/flamework",
    };
}
exports.createDiagnosticAtLocation = createDiagnosticAtLocation;
function createFormattedDiagnostic(node, category) {
    var messages = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        messages[_i - 2] = arguments[_i];
    }
    return createDiagnosticAtLocation(node, messages.join("\n"), category);
}
exports.createFormattedDiagnostic = createFormattedDiagnostic;
function error() {
    var messages = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        messages[_i] = arguments[_i];
    }
    return function (node) {
        return createFormattedDiagnostic.apply(void 0, __spreadArray([node, typescript_1.default.DiagnosticCategory.Error], __read(messages)));
    };
}
exports.error = error;
function warning() {
    var messages = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        messages[_i] = arguments[_i];
    }
    return function (node) {
        return createFormattedDiagnostic.apply(void 0, __spreadArray([node, typescript_1.default.DiagnosticCategory.Warning], __read(messages)));
    };
}
exports.warning = warning;
exports.Errors = {
    MISSING_SYMBOL: error("Symbol information is missing for this node."),
    MISSING_DECL: error("Could not find a declaration for this node"),
    INCORRECT_TYPE: function (got, expected) {
        return error("Expected " + expected + ", got " + typescript_1.default.SyntaxKind[got.kind])(got);
    },
    EXPECTED_TYPE_ARG: error("Expected type arguments but got none"),
};
exports.Warning = {};
